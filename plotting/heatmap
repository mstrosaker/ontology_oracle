#!/usr/bin/env python

import sys, os, argparse, tempfile, subprocess
from ontology_oracle.ontology_table import ontology_table

rscript = '/opt/ontology_oracle/plotting/helpers/gen_heatmap'

parser = argparse.ArgumentParser(prog='heatmap',
        description='Generates a heatmap to display the differential '
                    'reguation among various RNA-Seq runs.')
parser.add_argument('-f', '--format', type=str, default='png',
        choices = ['png', 'svg'],
        help='format of image(s) to produce (default: png)')
parser.add_argument('-o', '--orientation', type=str, default='vertical',
        choices = ['vertical', 'horizontal'],
        help='orientation of the heatmap (default: vertical)')
parser.add_argument('-a', '--annotation', type=str,
        help='only include terms that are annotated with a specified '
             'annotation label, and categorize (facet) the heatmap by '
             'that label')
parser.add_argument('-e', '--excludezeroes', action="store_true",
        help='exclude data in which the fold change is zero for all cases')
parser.add_argument('image_filename', type=str,
        help='base name of the output file (an extension will be added)')
parser.add_argument('tables', type=str, nargs='+',
        help='one or more tables containing the data to display; should be '
             'in the format "title:filename:label1:label2" to display the fold '
             'change from the expression at label1 to that at label2 from '
             'the table in filename.  The row/column in the heatmap will '
             'be titled as specified')
args = parser.parse_args()

tables = []
foldchange_labels = []
titles = []
for entry in args.tables:
    labels = entry.split(':')
    titles.append(labels[0])
    filename = labels[1]
    label1 = labels[2]
    label2 = ':'.join(labels[3:])

    tables.append(ontology_table(filename=filename))
    foldchange_labels.append('%s:%s' % (label1, label2))
    foldchange_label = 'foldchange:%s:%s' % (label1, label2)

    if foldchange_label not in tables[-1].feat_tab.colnames:
        missing_expr = False
        if ('expr:%s' % label1) not in tables[-1].feat_tab.colnames:
            missing_expr = True
            sys.stderr.write('There is no expression data with the label %s ' \
                             'in the ontology table %s.\n' % (label1,
                             filename))
        if ('expr:%s' % label2) not in tables[-1].feat_tab.colnames:
            missing_expr = True
            sys.stderr.write('There is no expression data with the label %s ' \
                             'in the ontology table %s.\n' % (label2,
                             filename))
        if not missing_expr:
            sys.stderr.write('No fold change was calculated for %s as ' \
                             ' compared to %s in the ontology table %s.\n' % \
                             (label2, label1, filename))
        sys.exit(1)

# obtain a full list of all locus tags/gene names for the output
locus_list = []

for tab in tables:
    for row in tab.feat_rows:
        if args.annotation:
            if args.annotation in row.annotation:
                locus_list.append(row.gene)
        else:
            locus_list.append(row.gene)

locus_list = list(set(locus_list))

# associate the foldchanges and annotations for each locus for each
# ontology table
outlist = []
for locus in locus_list:
    listitem = [locus]
    annotations = []
    for i in range(len(tables)):
        if locus in tables[i].index:
            row = tables[i].index[locus]
            if args.annotation and \
                    args.annotation in row.annotation_labels:
                annotations.append(row.annotation[args.annotation])

            changes = []
            if foldchange_labels[i] in row.foldchange_labels:
                foldchange = row.foldchanges[foldchange_labels[i]]
                changes.append(foldchange)

                # cap foldchanges at +/- 4
                foldchange = max(foldchange, -4)
                foldchange = min(foldchange, 4)

                listitem.append(str(foldchange))
            else:
                listitem.append('NA')
        else:
            listitem.append('NA')

    if args.excludezeroes:
        # exclude cases where the foldchange is 0 in all cases
        nonzero = [change for change in changes if change != 0.0]
        if len(nonzero) == 0:
            continue

    if args.annotation:
        if len(annotations) > 0:
            listitem.append('"%s"' % annotations[0])
        else:
            listitem.append('NA')

    outlist.append(listitem)


# use a temporary file to store the input to the R script
outfile_fd, outfile_name = tempfile.mkstemp()
outfile = os.fdopen(outfile_fd, 'w')

headers = ['gene']
for title in titles:
    headers.append(title)
if args.annotation:
    headers.append('annotation')

outfile.write('%s\n' % '\t'.join(headers))

for item in outlist:
    outfile.write('%s\n' % '\t'.join(item))

outfile.close()

# open a pipe to the R script for generating the plot
samples = len(outlist[0]) - 1
if args.annotation:
    samples -= 1
features = len(outlist)

if args.orientation == 'vertical':
    width = 360 + samples * 22
    height = 240 + features * 18
elif args.orientation == 'horizontal':
    width = 300 + features * 22
    height = 120 + samples * 30

if args.format == 'svg':
    width /= 100.0
    height /= 100.0

R_args = [rscript, outfile_name, args.format,
          '%s.%s' % (args.image_filename, args.format),
          str(width), str(height), args.orientation]
if args.annotation:
    R_args.append('facet')
proc = subprocess.Popen(R_args)
rc = proc.wait()

if rc == 0:
    print 'Plot written to %s.%s' % (args.image_filename, args.format)
else:
    print 'Error in the plot generation.'

os.remove(outfile_name)

